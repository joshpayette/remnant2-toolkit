datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------------------------------------------
// NextAuth.js models
// ---------------------------------------------------------------------------------------------

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerType       String?
  providerId         String?
  providerAccountId  String
  refresh_token      String?   @db.Text
  refreshToken       String?
  access_token       String?   @db.Text
  accessToken        String?
  accessTokenExpires DateTime?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  user
  moderator
  admin
  owner
}

model User {
  id            String            @id @default(cuid())
  name          String?
  displayName   String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  role          UserRole          @default(user)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  Build         Build[]
  BuildVotes    BuildVoteCounts[]
  BuildReports  BuildReports[]
  BannedUsers   BannedUsers[]
  PaidUsers     PaidUsers[]
  UserProfile   UserProfile?
  UserLoadouts  UserLoadouts[]
}

model UserProfile {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  userId               String   @unique // Added @unique directive
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  bio                  String   @db.Text
  avatarId             String   @default("2zr34P") // Gorge
  totalDiscoveredItems Int      @default(0)
  topItemQuizScore     Int      @default(0)
  isLoadoutPublic      Boolean  @default(false)
  Build                Build[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// ---------------------------------------------------------------------------------------------
// Other models
// ---------------------------------------------------------------------------------------------

enum ITEM_CATEGORY {
  helm
  torso
  legs
  gloves
  relic
  amulet
  weapon
  archtype
  concoction
  consumable
  mod
  mutator
  relicfragment
  ring
  skill
  trait
}

enum ITEM_DLC {
  base
  dlc1
  dlc2
}

model Item {
  id         String       @id @default(cuid())
  itemId     String       @unique
  dlc        ITEM_DLC     @default(base)
  isActive   Boolean      @default(true)
  BuildItems BuildItems[]
}

model UserLoadouts {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  slot      Int

  @@index([userId])
  @@index([buildId])
}

model Build {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  createdBy         User              @relation(fields: [createdById], references: [id])
  createdById       String
  isFeaturedBuild   Boolean           @default(false)
  isModeratorLocked Boolean           @default(false)
  isPatchAffected   Boolean           @default(false)
  isPublic          Boolean           @default(true)
  dateFeatured      DateTime?
  name              String
  description       String?           @db.Text
  videoUrl          String?
  thumbnailUrl      String?
  buildLink         String?
  BuildVotes        BuildVoteCounts[]
  BuildReports      BuildReports[]
  BuildItems        BuildItems[]
  UserProfile       UserProfile?      @relation(fields: [userProfileId], references: [id])
  userProfileId     String?
  UserLoadouts      UserLoadouts[]
  BuildTags         BuildTags[]

  @@index([createdById])
  @@index([userProfileId])
}

model BuildItems {
  id       String  @id @default(cuid())
  build    Build   @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId  String
  item     Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   String
  category String?
  index    Int?
  amount   Int?

  @@index([buildId])
  @@index([itemId])
}

model BuildVoteCounts {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([buildId])
  @@index([userId])
}

model BuildReports {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  build     Build    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  reason    String

  @@index([buildId])
  @@index([userId])
}

enum BUILD_TAG {
  Melee
  Ranged
  Mods
  Skills
  StatusEffects
  Tank
  Support
}

model BuildTags {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId   String
  tag       BUILD_TAG

  @@index([buildId])
}

model BannedUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reason    String

  @@index([userId])
}

model PaidUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}
